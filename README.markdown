# Файловый менеджер

Файловый менеджер с улучшенным текстовым интерфейсом, реализованный на Python. Поддерживает работу с файлами и директориями в пределах рабочей директории, многопользовательский доступ, архивацию и квотирование.

## Возможности
- Создание и удаление директорий (`mkdir`, `rmdir`)
- Навигация по файловой системе (`cd`, `ls`/`dir`)
- Операции с файлами: создание, чтение, запись, удаление, копирование, перемещение, переименование (`create`, `read`, `write`, `rm`, `cp`, `mv`, `rename`)
- Архивация и разархивация файлов (`zip`, `unzip`)
- Многопользовательский доступ с регистрацией и изолированными директориями
- Квотирование дискового пространства (ограничение размера директории)
- Улучшенный текстовый интерфейс с автодополнением и стилизацией (`prompt_toolkit`)
- Настраиваемая рабочая директория через `config.json`
- Кроссплатформенность (Windows, UNIX-подобные системы)

## Установка
1. Клонируйте репозиторий:
   ```bash
   git clone <repository-url>
   cd file-manager
   ```
2. Убедитесь, что установлен Python 3.8+.
3. Установите `prompt_toolkit`:
   ```bash
   pip install prompt_toolkit
   ```
4. Создайте или измените `config.json`:
   ```json
   {
       "root_directory": "./workspace",
       "quota_mb": 10
   }
   ```
5. Запустите:
   ```bash
   python file_manager_prompt.py
   ```

## Использование
Запустите `python file_manager_prompt.py`:
- Зарегистрируйтесь: `register <username> <password>`
- Войдите: `login <username> <password>`
- Команды:
  - `ls` или `dir`: Показать содержимое
  - `mkdir <name>`: Создать директорию
  - `rmdir <name>`: Удалить директорию
  - `cd <name>`: Сменить директорию
  - `create <name>`: Создать файл
  - `read <name>`: Прочитать файл
  - `write <name> <text>`: Записать текст
  - `rm <name>`: Удалить файл
  - `cp <src> <dst>`: Копировать файл
  - `mv <src> <dst>`: Переместить файл
  - `rename <old> <new>`: Переименовать файл
  - `zip <file>`: Заархивировать файл
  - `unzip <archive>`: Разархивировать
  - `quota`: Проверить использование квоты
  - `logout`: Выйти из учетной записи
  - `help`: Показать команды
  - `exit`: Выйти

## Структура проекта
- `file_manager_prompt.py`: Улучшенный текстовый интерфейс с многопользовательским доступом
- `file_operations.py`: Модуль для операций с файлами
- `config.json`: Конфигурация (рабочая директория, квота)
- `users.json`: Данные пользователей
- `README.md`: Документация
- `.gitignore`: Игнорируемые файлы
- `REPORT.md`: Отчет

## Разработка
- Используются библиотеки: `os`, `pathlib`, `shutil`, `json`, `zipfile`, `prompt_toolkit`.
- Операции ограничены рабочей директорией.
- Код модульный, с разделением интерфейса и операций.

## Контрибьютинг
1. Сделайте форк репозитория.
2. Создайте ветку (`git checkout -b feature-name`).
3. Зафиксируйте изменения (`git commit -m "Add feature"`).
4. Отправьте ветку (`git push origin feature-name`).
5. Откройте pull request.

## Лицензия
MIT License